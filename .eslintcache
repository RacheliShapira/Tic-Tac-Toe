[{"C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\index.js":"1","C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\reportWebVitals.js":"2","C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\App.js":"3","C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\GameBoard.js":"4","C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\Frame.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":1705,"mtime":1612369059917,"results":"9","hashOfConfig":"7"},{"size":5692,"mtime":1612370582584,"results":"10","hashOfConfig":"7"},{"size":1200,"mtime":1612372921187,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ky9f09",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\index.js",[],["25","26"],"C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\reportWebVitals.js",[],"C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\App.js",[],"C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\GameBoard.js",["27"],"import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nexport default class GameBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.slots=[];\r\n        this.victory=false;\r\n        this.emptySlotscounter=0\r\n        this.winner=\"\";\r\n       this.winnerVcombination=[[0,1,2],[3,4,5],[6,7,8]]\r\n       this.winnerHcombination=[[0,3,6],[1,4,7],[2,5,8]]\r\n       this.winnerDcombination=[[0,4,8],[2,4,6]]\r\n      } \r\n\r\n    componentWillMount() {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.slots[i]=\"emptySlot\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(){\r\n        //check for reset\r\n            if(this.props.resetBoard){\r\n                for (let i = 0; i < 9; i++) {\r\n                    this.slots[i]=\"emptySlot\"\r\n                }\r\n                window.location.reload();\r\n            }\r\n        }\r\n\r\n    \r\n \r\n    play(x){\r\n        \r\n        if (!this.props.gameTie & !this.victory & this.slots[x]===\"emptySlot\") {\r\n            this.slots[x]=this.props.currentPlayer;  \r\n            this.victory= this.checkWin(x); \r\n            if ( this.victory)    {\r\n                this.props.isWin();\r\n                console.log(\"Winner is \", this.victory);\r\n            }  \r\n            this.props.changePlayer();    \r\n        } \r\n        this.emptySlotscounter++;\r\n       if ( !this.victory &this.emptySlotscounter===9) {\r\n        this.props.isTie();\r\n       }\r\n    }\r\n\r\n   \r\n    \r\n    checkWin(slotNum){\r\n        this.winner =this.checkVwin(slotNum)\r\n        if (!this.winner){\r\n            this.winner =this.checkHwin(slotNum)\r\n        }  if (!this.winner){\r\n            this.winner =this.checkDwin(slotNum)\r\n        } \r\n       \r\n        // console.log(\"this.winner\", this.winner);\r\n        if (this.winner) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }        \r\n    }\r\n   \r\n    checkVwin(slotNum){\r\n        // console.log(\"checkVwin\");\r\n        for (let vComboOut = 0; vComboOut < this.winnerVcombination.length; vComboOut++) {\r\n           var player1Count=0;\r\n           var player2Count=0;  \r\n           for (let vComboIn = 0; vComboIn < this.winnerVcombination[vComboOut].length; vComboIn++) {\r\n                if (this.slots[this.winnerVcombination[vComboOut][vComboIn]]===\"player1\"){\r\n                    player1Count++;  \r\n                } else if (this.slots[this.winnerVcombination[vComboOut][vComboIn]]===\"player2\"){\r\n                    player2Count++;  \r\n                }  \r\n                if (player1Count===3){\r\n                    // console.log(\"combo\", this.winnerVcombination[vComboOut]);\r\n                    return \"player1\"\r\n                } else  if (player2Count===3){\r\n                 return \"player2\"\r\n                 }               \r\n           }  \r\n                \r\n        }     \r\n        return false\r\n    }\r\n\r\n\r\n    checkHwin(slotNum){\r\n        // console.log(\"checkHwin\");\r\n        for (let hComboOut = 0; hComboOut < this.winnerHcombination.length; hComboOut++) {\r\n           var player1Count=0;\r\n           var player2Count=0;  \r\n           for (let hComboIn = 0; hComboIn < this.winnerHcombination[hComboOut].length; hComboIn++) {\r\n                if (this.slots[this.winnerHcombination[hComboOut][hComboIn]]===\"player1\"){\r\n                    player1Count++;  \r\n                } else if (this.slots[this.winnerHcombination[hComboOut][hComboIn]]===\"player2\"){\r\n                    player2Count++;  \r\n                } \r\n                if (player1Count===3){\r\n                    return \"player1\"\r\n                } else  if (player2Count===3){\r\n                 return \"player2\"\r\n                 }             \r\n           }    \r\n                 \r\n        }     \r\n        return false\r\n    }\r\n    checkDwin(slotNum){\r\n        // console.log(\"checkDwin\");\r\n        for (let dComboOut = 0; dComboOut < this.winnerDcombination.length; dComboOut++) {\r\n           var player1Count=0;\r\n           var player2Count=0;  \r\n           for (let dComboIn = 0; dComboIn < this.winnerDcombination[dComboOut].length; dComboIn++) {\r\n                if (this.slots[this.winnerDcombination[dComboOut][dComboIn]]===\"player1\"){\r\n                    player1Count++;  \r\n                } else if (this.slots[this.winnerDcombination[dComboOut][dComboIn]]===\"player2\"){\r\n                    player2Count++;  \r\n                }             \r\n                if (player1Count===3){\r\n                    return \"player1\"\r\n                } else  if (player2Count===3){\r\n                 return \"player2\"\r\n                 } \r\n            }    \r\n                 \r\n        }     \r\n        return false\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n             <div className=\"row\">\r\n                 <div className={this.slots[0]} onClick={() => this.play(0)}></div>\r\n                 <div className={this.slots[1]} onClick={() => this.play(1)}></div>\r\n                 <div className={this.slots[2]} onClick={() => this.play(2)}></div>\r\n             </div>\r\n             <div className=\"row\">\r\n                 <div className={this.slots[3]} onClick={() => this.play(3)}></div>\r\n                 <div className={this.slots[4]} onClick={() => this.play(4)}></div>\r\n                 <div className={this.slots[5]} onClick={() => this.play(5)}></div>\r\n             </div>\r\n             <div className=\"row\">\r\n                <div className={this.slots[6]} onClick={() => this.play(6)}></div>\r\n                <div className={this.slots[7]} onClick={() => this.play(7)}></div>\r\n                <div className={this.slots[8]} onClick={() => this.play(8)}></div>\r\n             </div>\r\n            </div>\r\n        );\r\n      }\r\n    \r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Racheli\\Documents\\CodeingProject\\Tic-Tac-Toe\\src\\Frame.js",["28","29"],"import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction GameFrame(props) {\r\n    //in future- user can set players names\r\n    // const p1=\"Player #1\";\r\n    // const p2=\"Player #2\";\r\n    \r\n    if (props.currentPlayer===\"player1\") {\r\n        var pPlayer1=\"pBig\";\r\n        var pPlayer2=\"pSmall\";\r\n    } else{\r\n        var pPlayer1=\"pSmall\"   ;\r\n        var pPlayer2=\"pBig\"; \r\n    }\r\n    \r\n    return(\r\n        <div className=\"side\">\r\n            {!props.gameTie && !props.gameWin &&(\r\n                <div className=\"sideP\">\r\n                    <p className={pPlayer1}>Player #1</p>\r\n                    <p className={pPlayer2}>Player #2</p>\r\n                </div>\r\n                )}\r\n            {props.gameTie && (\r\n                <div className=\"sideP\">\r\n                    <h2 className=\"gameOver\">It's a Tie!</h2>\r\n                </div>\r\n                )}\r\n            {props.gameWin && (\r\n                <div className=\"sideP\">\r\n                    <h2 className=\"gameOver\">Winner!!</h2>\r\n                </div>\r\n                )}\r\n            <button onClick={props.isReset}>New Game</button>\r\n            \r\n        </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default GameFrame;",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":16,"nodeType":"36","messageId":"37","endLine":1,"endColumn":24},{"ruleId":"38","severity":1,"message":"39","line":13,"column":13,"nodeType":"36","messageId":"40","endLine":13,"endColumn":21},{"ruleId":"38","severity":1,"message":"41","line":14,"column":13,"nodeType":"36","messageId":"40","endLine":14,"endColumn":21},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-redeclare","'pPlayer1' is already defined.","redeclared","'pPlayer2' is already defined.","no-global-assign","no-unsafe-negation"]